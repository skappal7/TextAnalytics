# -*- coding: utf-8 -*-
"""TA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rvFgd31fKopLtpxBUQbmiXseQyPAtSel
"""

import streamlit as st
import pandas as pd
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import CountVectorizer
import nltk
from nltk.corpus import stopwords
from nltk.sentiment import SentimentIntensityAnalyzer

# Download NLTK data if not already downloaded
nltk.download('vader_lexicon')
nltk.download('stopwords')

# Initialize VADER Sentiment Analyzer and stopwords set
sid = SentimentIntensityAnalyzer()
english_stopwords = set(stopwords.words('english'))

# Function to perform sentiment analysis using VADER
def perform_sentiment_analysis_vader(text):
    sentiment_scores = sid.polarity_scores(text)
    return sentiment_scores

# Function to display sentiment analysis as a bar graph
def display_sentiment_analysis(sentiment_scores):
    labels = ['Negative', 'Neutral', 'Positive']
    values = [sentiment_scores['neg'], sentiment_scores['neu'], sentiment_scores['pos']]

    # Set colors for each sentiment type
    colors = ['lightcoral', 'gray', 'green']  # Light red for negative, gray for neutral, green for positive

    fig, ax = plt.subplots()
    ax.bar(labels, values, color=colors)
    ax.set_title('Sentiment Analysis')
    ax.set_ylabel('Score')
    st.pyplot(fig)

# Function to generate word clouds for positive and negative sentiment words
def generate_word_clouds(text):
    # Generate positive word cloud
    positive_words = [word for word in text.split() if sid.polarity_scores(word)['compound'] > 0]
    if positive_words:
        positive_wordcloud = WordCloud(width=800, height=400, background_color='white').generate(' '.join(positive_words))
        fig, ax = plt.subplots()
        ax.set_title("Positive Sentiment Word Cloud")
        ax.imshow(positive_wordcloud, interpolation='bilinear')
        ax.axis('off')
        st.pyplot(fig)
    else:
        st.write("No positive sentiment words found.")

    # Generate negative word cloud
    negative_words = [word for word in text.split() if sid.polarity_scores(word)['compound'] < 0]
    if negative_words:
        negative_wordcloud = WordCloud(width=800, height=400, background_color='white').generate(' '.join(negative_words))
        fig, ax = plt.subplots()
        ax.set_title("Negative Sentiment Word Cloud")
        ax.imshow(negative_wordcloud, interpolation='bilinear')
        ax.axis('off')
        st.pyplot(fig)
    else:
        st.write("No negative sentiment words found.")

# Function to display word frequencies and sentiment scores in a table
def display_word_frequencies_table(text):
    # Convert english_stopwords set to a list
    stop_words_list = list(english_stopwords)

    # Initialize CountVectorizer with the stop words list
    vectorizer = CountVectorizer(stop_words=stop_words_list)

    # Fit and transform the text
    words = vectorizer.fit_transform([text])

    # Get word features and sum of frequencies
    words_freq = zip(vectorizer.get_feature_names_out(), words.toarray().sum(axis=0))

    # Sort by frequency in descending order
    words_freq = sorted(words_freq, key=lambda x: x[1], reverse=True)

    # Calculate sentiment scores for words
    data = {'Word': [], 'Frequency': [], 'Sentiment Score': []}
    for word, freq in words_freq:
        sentiment_score = sid.polarity_scores(word)['compound']
        data['Word'].append(word)
        data['Frequency'].append(freq)
        data['Sentiment Score'].append(sentiment_score)

    # Convert data dictionary to DataFrame
    df = pd.DataFrame(data)

    # Display the table
    st.write("Word Frequencies with Sentiment Scores:")
    st.write(df)

# Function to display sentiment histogram
def display_sentiment_histogram(text):
    # Calculate compound sentiment scores for each sentence
    sentiment_scores = [sid.polarity_scores(sentence)['compound'] for sentence in text.split('.') if len(sentence.strip()) > 0]

    # Plot the histogram with carbon blue color for bars
    fig, ax = plt.subplots()
    ax.hist(sentiment_scores, bins=20, color='steelblue')  # Carbon blue color
    ax.set_title('Sentiment Histogram')
    ax.set_xlabel('Compound Sentiment Score')
    ax.set_ylabel('Frequency')

    st.pyplot(fig)

# Streamlit app
st.title("Text Analytics App")

# File uploader
uploaded_file = st.file_uploader("Upload a CSV or text file", type=['csv', 'txt'])

if uploaded_file is not None:
    # Read CSV file if uploaded, or decode text file
    if uploaded_file.name.endswith('.csv'):
        df = pd.read_csv(uploaded_file)
        text_column = st.selectbox("Select the text column", df.columns)
        text = " ".join(df[text_column])
    else:
        text = uploaded_file.getvalue().decode("utf-8")

    # Perform thorough sentiment analysis using VADER
    sentiment_scores = perform_sentiment_analysis_vader(text)

    # Display sentiment analysis results as a bar graph
    display_sentiment_analysis(sentiment_scores)

    # Generate positive and negative sentiment word clouds
    generate_word_clouds(text)

    # Display word frequencies and sentiment scores in a table
    display_word_frequencies_table(text)

    # Display sentiment histogram
    display_sentiment_histogram(text)